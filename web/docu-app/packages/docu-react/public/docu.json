{
	"name": "compare",
	"description": "Documentation of the EPackage compare.",
	"classes": [
		{
			"name": "Comparison",
			"description": "This will act as the 'root' of a comparison. It will reference one match for every root of the input models, along with the differences detected for each of them.",
			"attributes": [
				{
					"name": "threeWay",
					"description": "Documentation of the EAttribute threeWay.",
					"type": "boolean",
					"many": false
				},
				{
					"name": "diagnostic",
					"description": "Documentation of the EAttribute diagnostic.",
					"type": "Diagnostic",
					"many": false
				}
			],
			"references": [
				{
					"name": "matchedResources",
					"description": "This contains the mappings for each compared Resource.",
					"type": "MatchResource",
					"many": true
				},
				{
					"name": "matches",
					"description": "This contains the match tree 'mimicking' the input models' hierarchy.",
					"type": "Match",
					"many": true
				},
				{
					"name": "conflicts",
					"description": "If we detected any conflict during the comparison process, this will contain them.",
					"type": "Conflict",
					"many": true
				},
				{
					"name": "equivalences",
					"description": "If we detected any equivalence between diffs during the comparison process, this will contain them.",
					"type": "Equivalence",
					"many": true
				}
			],
			"operations": [
				{
					"name": "getDifferences",
					"description": "Returns all differences contained by this Comparison and its children.",
					"type": "Diff",
					"many": true
				},
				{
					"name": "getDifferences",
					"description": "Returns all differences that reference the given EObject (for instance, all ReferenceChanges that reference the given EObject through the 'value' EReference). \n<p>\nTo get differences detected on the given EObject or one of its counterpart in left, right or origin, you should call the following code:\n<pre>\nMatch match = getMatch(eObject);\nif (match != null) {\n    differences = match.getDifferences();\n}\n</pre>",
					"type": "Diff",
					"many": true,
					"parameters": [
						{
							"name": "element",
							"type": "EObject"
						}
					]
				},
				{
					"name": "getMatch",
					"description": "Finds and return the Match for the given EObject.",
					"type": "Match",
					"many": false,
					"parameters": [
						{
							"name": "element",
							"type": "EObject"
						}
					]
				},
				{
					"name": "getEqualityHelper",
					"description": "Documentation of the EOperation getEqualityHelper.",
					"type": "IEqualityHelper",
					"many": false
				}
			]
		},
		{
			"name": "MatchResource",
			"description": "A MatchResource element represents the mapping between two or three resources : left, right, and their optional common ancestor. The resource will be identified through its URI.",
			"attributes": [
				{
					"name": "leftURI",
					"description": "Cannot be null. Represents the URI of the left resource of this mapping.",
					"type": "String",
					"many": false
				},
				{
					"name": "rightURI",
					"description": "Cannot be null. Represents the URI of the right resource of this mapping.",
					"type": "String",
					"many": false
				},
				{
					"name": "originURI",
					"description": "This can be null in the case of two-way comparisons. If assigned, it will represent the URI of the origin resource for this mapping; the common ancestor of both others.",
					"type": "String",
					"many": false
				},
				{
					"name": "left",
					"description": "Keeps a reference towards the left Resource of this Match. Might be null if this is a Comparison we have re-loaded from its serialized form and the left EResource could not be loaded.",
					"type": "Resource",
					"many": false
				},
				{
					"name": "right",
					"description": "Keeps a reference towards the right Resource of this Match. Might be null if this is a Comparison we have re-loaded from its serialized form and the right EResource could not be loaded.",
					"type": "Resource",
					"many": false
				},
				{
					"name": "origin",
					"description": "Keeps a reference towards the origin Resource of this Match. Might be null if this is a Comparison we have re-loaded from its serialized form and the origin EResource could not be loaded.",
					"type": "Resource",
					"many": false
				}
			],
			"references": [
				{
					"name": "comparison",
					"description": "Documentation of the EReference comparison.",
					"type": "Comparison",
					"many": false
				},
				{
					"name": "locationChanges",
					"description": "Documentation of the EReference locationChanges.",
					"type": "ResourceLocationChange",
					"many": true
				}
			]
		},
		{
			"name": "Match",
			"description": "A MatchElement describes the mapping between the EObjects of two or three resources. This will reference all three of left, right and origin resources. However, note that instances of this class will also represent unmatched elements, in which case only one of either 'left' or 'right' will be assigned.",
			"references": [
				{
					"name": "submatches",
					"description": "The MatchElements will 'mimic' the hierarchy of the input model(s). This containment feature will serve that purpose.",
					"type": "Match",
					"many": true
				},
				{
					"name": "differences",
					"description": "This will contain the list of all differences pertaining to this mapping, if any.",
					"type": "Diff",
					"many": true
				},
				{
					"name": "left",
					"description": "This can be null in the case of unmatched elements in the right model. In all other cases, it will reference the left element of this mapping.",
					"type": "EObject",
					"many": false
				},
				{
					"name": "right",
					"description": "This can be null in the case of unmatched elements in the left model. In all other cases, it will reference the right element of this mapping.",
					"type": "EObject",
					"many": false
				},
				{
					"name": "origin",
					"description": "This can be null in the case of two-way comparisons, or unmatched elements that are only located in either left or right, i.e an element that was added since the origin, either in the left copy or the right one. In any other course of event, this will reference the origin element of this mapping.",
					"type": "EObject",
					"many": false
				}
			],
			"operations": [
				{
					"name": "getComparison",
					"description": "Finds and return the Comparison containing this Match.",
					"type": "Comparison",
					"many": false
				},
				{
					"name": "getAllSubmatches",
					"description": "Finds and returns all matches contained in this Match and its children, recursively.",
					"type": "Iterable<Match>",
					"many": false
				},
				{
					"name": "getAllDifferences",
					"description": "Finds and returns all differences contained in this Match and its children, recursively.",
					"type": "Iterable<Diff>",
					"many": false
				}
			]
		},
		{
			"name": "Diff",
			"description": "A DiffElement describes a difference related to the EObjects mapped by its parent MatchElement.",
			"attributes": [
				{
					"name": "kind",
					"description": "Describes the kind of this difference, whether it is an addition, deletion, change, or move.",
					"type": "DifferenceKind",
					"many": false
				},
				{
					"name": "source",
					"description": "Returns the source of this diff, either one of DifferenceSource.LEFT (for two-way comparisons or differences detected between the left and origin elements) or DifferenceSource.RIGHT (for differences between the right and origin elements).",
					"type": "DifferenceSource",
					"many": false
				},
				{
					"name": "state",
					"description": "Returns the current state of this diff, either one of DifferenceState.UNRESOLVED (Diff is still in its initial state), DifferenceState.MERGED when the Diff has been merged or DifferenceState.DISCARDED if the user chose to ignore this difference.",
					"type": "DifferenceState",
					"many": false
				}
			],
			"references": [
				{
					"name": "match",
					"description": "Back-reference towards this difference's parent match, it points towards the mapping on which this difference has been detected.",
					"type": "Match",
					"many": false
				},
				{
					"name": "requires",
					"description": "This will reference all differences that should be merged before this one.",
					"type": "Diff",
					"many": true
				},
				{
					"name": "requiredBy",
					"description": "This will reference all differences that depend on this one for their merging.",
					"type": "Diff",
					"many": true
				},
				{
					"name": "implies",
					"description": "Documentation of the EReference implies.",
					"type": "Diff",
					"many": true
				},
				{
					"name": "impliedBy",
					"description": "Documentation of the EReference impliedBy.",
					"type": "Diff",
					"many": true
				},
				{
					"name": "refines",
					"description": "This can be used to create 'high level' differences to regroup one or more diffs in a common 'container'. For example, this could be used to regroup <i>n</i> technical differences into one single semantic difference, such as the differences 'profile application added' and 'reference to stereotype added' that can actually be regrouped under a single, more understandable 'stereotype application added'.",
					"type": "Diff",
					"many": true
				},
				{
					"name": "refinedBy",
					"description": "This will reference the higher-level difference that shadows this one, if any.",
					"type": "Diff",
					"many": true
				},
				{
					"name": "primeRefining",
					"description": "Documentation of the EReference primeRefining.",
					"type": "Diff",
					"many": false
				},
				{
					"name": "equivalence",
					"description": "If this diff is equivalent to another, we will reference the equivalence from here. For example, if a reference has an eOpposite, we will detect one diff for each side of the bidirectional reference, yet merging one of these diffs is enough. We consider them equivalent.",
					"type": "Equivalence",
					"many": false
				},
				{
					"name": "conflict",
					"description": "If this element is in conflict with one (or more) other differences, this will reference the Conflict association.",
					"type": "Conflict",
					"many": false
				}
			],
			"operations": [
				{
					"name": "copyRightToLeft",
					"description": "This will merge the diff from left to right.",
					"type": "void",
					"many": false
				},
				{
					"name": "copyLeftToRight",
					"description": "This will merge the diff from right to left.",
					"type": "void",
					"many": false
				},
				{
					"name": "discard",
					"description": "This will remove the diff from the model, effectively 'forgetting' about it.",
					"type": "void",
					"many": false
				}
			]
		},
		{
			"name": "ResourceAttachmentChange",
			"description": "This particular kind of difference describes the fragmentation (or un-fragmentation) of a model element in its own (or back in its parent's) resource.",
			"superTypes": [
				"Diff"
			],
			"attributes": [
				{
					"name": "resourceURI",
					"description": "URI of the resource in which the parent mapping's element is now located.",
					"type": "String",
					"many": false
				}
			]
		},
		{
			"name": "ResourceLocationChange",
			"description": "This particular kind of difference describes the change of a resource's location.",
			"superTypes": [
				"Diff"
			],
			"attributes": [
				{
					"name": "baseLocation",
					"description": "Cannot be null. Represents the URI of the left resource of this mapping.",
					"type": "String",
					"many": false
				},
				{
					"name": "changedLocation",
					"description": "Cannot be null. Represents the URI of the right resource of this mapping.",
					"type": "String",
					"many": false
				}
			]
		},
		{
			"name": "ReferenceChange",
			"description": "This particular kind of difference will be used to describe changes within a reference, whether the feature is multi-valued or not. In the case of a MOVE difference, this could actually mean two things : either the value has been moved from one index to another (moving the value at another position of the same reference), or the value has been moved from one container to another. This second case will only happen with containment references.",
			"superTypes": [
				"Diff"
			],
			"references": [
				{
					"name": "reference",
					"description": "The reference in which 'something' changed. If this difference is a MOVE from one reference to another, this will point towards the left reference.",
					"type": "EReference",
					"many": false
				},
				{
					"name": "value",
					"description": "References the actual value on which a difference has been detected.",
					"type": "EObject",
					"many": false
				}
			]
		},
		{
			"name": "AttributeChange",
			"description": "This particular kind of difference will be used to describe changes within an attribute, whether the feature is multi-valued or not.",
			"superTypes": [
				"Diff"
			],
			"attributes": [
				{
					"name": "value",
					"description": "References the actual value on which a difference has been detected.",
					"type": "Object",
					"many": false
				}
			],
			"references": [
				{
					"name": "attribute",
					"description": "The attribute in which 'something' changed.",
					"type": "EAttribute",
					"many": false
				}
			]
		},
		{
			"name": "FeatureMapChange",
			"description": "This particular kind of difference will be used to describe changes within a multi-valued EFeatureMapEntry attribute.",
			"superTypes": [
				"Diff"
			],
			"attributes": [
				{
					"name": "value",
					"description": "References the actual value on which a difference has been detected.",
					"type": "Object",
					"many": false
				}
			],
			"references": [
				{
					"name": "attribute",
					"description": "The attribute in which 'something' changed.",
					"type": "EAttribute",
					"many": false
				}
			]
		},
		{
			"name": "Conflict",
			"description": "Instances of this class describe conflicts between one or more differences in the left model as compared to differences in the right model. Conflicts can only happen in the case of three-way comparisons, when we have a common ancestor of both sides.",
			"attributes": [
				{
					"name": "kind",
					"description": "Describes the kind of this conflict, whether it is a real conflict or a pseudo-conflict.",
					"type": "ConflictKind",
					"many": false
				}
			],
			"references": [
				{
					"name": "differences",
					"description": "This will reference all differences that are related to this conflict. The number of elements contained in this list is <u>at least</u> two.",
					"type": "Diff",
					"many": true
				}
			],
			"operations": [
				{
					"name": "getLeftDifferences",
					"description": "This can be used to retrieve the list of differences that were made in the left element.",
					"type": "Diff",
					"many": true
				},
				{
					"name": "getRightDifferences",
					"description": "This can be used to retrieve the list of differences that were made in the right element.",
					"type": "Diff",
					"many": true
				}
			]
		},
		{
			"name": "Equivalence",
			"description": "Diffs are considered equivalent if merging one is enough to resolve both differences. For example, if a reference has an eOpposite, we will detect one diff for each side of the bidirectional reference, yet merging one of these diffs will automatically update the model in such a way that the second diff is 'merged'.",
			"references": [
				{
					"name": "differences",
					"description": "References the <i>n</i> diffs composing this equivalence. There are <u>at least</u> two diffs in this list.",
					"type": "Diff",
					"many": true
				}
			]
		}
	],
	"enums": [
		{
			"name": "DifferenceKind",
			"description": "The differences detected through EMF Compare can be of 4 general types.\n<ul>\n\t<li>ADD represent addition of model element or feature values,</li>\n\t<li>DELETE represent suppression of model element or feature values,</li>\n\t<li>CHANGE represent the modification of a feature value,</li>\n\t<li>MOVE will be used for difference on the containment feature of a model element, or differences on the order of a feature's values.</li>\n</ul>",
			"literals": [
				{
					"name": "ADD",
					"description": "Represents the addition of model elements or feature values.",
					"value":0
				},
				{
					"name": "DELETE",
					"description": "Represents the suppression of model elements or feature values.",
					"value":1
				},
				{
					"name": "CHANGE",
					"description": "Represents the modification of a feature value.",
					"value":2
				},
				{
					"name": "MOVE",
					"description": "Describes a difference on the containment feature of a model element, or differences on the order of a feature's values.",
					"value":3
				}
			]
		},
		{
			"name": "DifferenceSource",
			"description": "This will be used to represent the source of a detected diff.\n<ul>\n\t<li>LEFT if the difference has been detected between the left element and its origin,</li>\n\t<li>RIGHT if the difference has been detected between the right element and its origin.</li>\n</ul>\n<b>Note</b> that differences detected during two-way comparisons will only be LEFT.",
			"literals": [
				{
					"name": "LEFT",
					"description": "Will be used if the difference has been detected between the left element and its origin. Differences detected during two-way comparisons will always have this has their source.",
					"value":0
				},
				{
					"name": "RIGHT",
					"description": "Will be used if the difference has been detected between the right element and its origin.",
					"value":1
				}
			]
		},
		{
			"name": "DifferenceState",
			"description": "This will be used to represent the state of a detected diff.\n<ul>\n\t<li>UNRESOLVED if the Diff is still in its initial state and the two sides differ,</li>\n\t<li>MERGED if the Diff has already been merged by the user,</li>\n\t<li>DISCARDED if the user chose to ignore this Diff,</li>\n\t<li>MERGING if the Diff is in the process of being merged.</li>\n</ul>",
			"literals": [
				{
					"name": "UNRESOLVED",
					"description": "Indicates that the Diff is still in its initial state.",
					"value":0
				},
				{
					"name": "MERGED",
					"description": "Indicates that the Diff has already been merged by the user.",
					"value":1
				},
				{
					"name": "DISCARDED",
					"description": "Indicates that the user chose to ignore this Diff.",
					"value":2
				},
				{
					"name": "MERGING",
					"description": "Indicates that the Diff is in the process of being merged.",
					"value":3
				}
			]
		},
		{
			"name": "ConflictKind",
			"description": "Conflicts detected through EMF Compare can be of a number of different types.\n<ul>\n\t<li>REAL are the conflicts that cannot be merged automatically,</li>\n\t<li>PSEUDO are the 'conflicts' that represent the same change made on the two sides, which can thus be automatically merged.</li>\n</ul>",
			"literals": [
				{
					"name": "REAL",
					"description": "conflicts that cannot be merged automatically as they represent incompatible differences on the two sides.",
					"value":0
				},
				{
					"name": "PSEUDO",
					"description": "If the same change has been made on the two sides since the common ancestor, these changes will be marked as 'pseudo-conflicting' changes : there are changes, but they can be merged automatically.",
					"value":1
				}
			]
		}
	],
	"dataTypes": [
		{
			"name": "EIterable",
			"description": "Documentation of the EDataType EIterable.",
			"type":"java.lang.Iterable"
		},
		{
			"name": "IEqualityHelper",
			"description": "Documentation of the EDataType IEqualityHelper.",
			"type":"org.eclipse.emf.compare.utils.IEqualityHelper"
		},
		{
			"name": "Diagnostic",
			"description": "Documentation of the EDataType Diagnostic.",
			"type":"org.eclipse.emf.common.util.Diagnostic"
		}
	]
}